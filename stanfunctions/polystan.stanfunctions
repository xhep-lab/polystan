// inverse transform sampling from $x \sim \mathcal{U}(0, 1)$

real flat_prior(real x, real a, real b) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \mathcal{U}(a, b)$
  return (b - a) * x + a;
}

vector flat_prior(vector x, real a, real b) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \mathcal{U}(a, b)$
  return (b - a) * x + a;
}

real log_prior(real x, real a, real b) {
  // if $x \sim \mathcal{U}(0, 1)$ then $\log y \sim \mathcal{U}(\log a, \log b)$
  return a * exp(log(b / a) * x);
}

real std_normal_prior(real x) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \mathcal{N}(0, 1)$
  return inv_Phi(x);
}

vector std_normal_prior(vector x) {
  // if $\vec x \sim \mathcal{U}(0, 1)$ then $\vec y \sim \mathcal{N}(0, 1)$
  return inv_Phi(x);
}

real half_std_normal_prior(real x) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \mathcal{N}_{>0}(0, 1)$
  return std_normal_prior(flat_prior(x, 0.5, 1.));
}

real normal_prior(real x, real mu, real sigma) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \mathcal{N}(\mu, \sigma^2)$
  return inv_Phi(x) * sigma + mu;
}

vector normal_prior(vector x, real mu, real sigma) {
  // if $\vec x \sim \mathcal{U}(0, 1)$ then $\vec y \sim \mathcal{N}(\mu, \sigma^2)$
  return inv_Phi(x) * sigma + mu;
}

real half_normal_prior(real x, real mu, real sigma) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \mathcal{N}_{>\mu}(\mu, \sigma^2)$
  return normal_prior(flat_prior(x, 0.5, 1.), mu, sigma);
}

vector multi_normal_prior(vector x, vector mu, matrix Sigma) {
  // if $\vec x \sim \mathcal{U}(0, 1)$ then $\vec y \sim \mathcal{N}(\vec \mu, \vec \Sigma)$
  return multi_normal_cholesky_prior(x, mu, cholesky_decompose(Sigma));
}

vector multi_normal_cholesky_prior(vector x, vector mu, matrix L) {
  // if $\vec x \sim \mathcal{U}(0, 1)$ then $\vec y \sim \mathcal{N}(\vec \mu, \vec \Sigma = \vec L \vec L^T)$
  return L * inv_Phi(x) + mu;
}

real log10normal_prior(real x, real mu, real sigma) {
  // if $x \sim \mathcal{U}(0, 1)$ then $\log_{10} y \sim \mathcal{N}(\mu, \sigma^2)$
  return exp(log(10.) * normal_prior(x, mu, sigma));
}

real lognormal_prior(real x, real mu, real sigma) {
  // if $x \sim \mathcal{U}(0, 1)$ then $\log y \sim \mathcal{N}(\mu, \sigma^2)$
  return exp(normal_prior(x, mu, sigma));
}

real beta_prior(real x, real alpha, real beta) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \text{Beta}(\alpha, \beta)$
  return inv_inc_beta(alpha, beta, x);
}

real beta_prime_prior(real x, real alpha, real beta) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \text{Beta}'(\alpha, \beta)$
  real p = inv_inc_beta(alpha, beta, x);
  return p / (1. - p);
}

real dagum_prior(real x, real p, real a, real b) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \text{Dag}(p, a, b)$
  return b * pow(pow(x, -1. / p) - 1., -1. / a);
}

real exponential_prior(real x, real lambda) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \text{Exp}(\lambda)$
  return -log(1. - x) / lambda;
}

real cauchy_prior(real x, real x0, real gamma) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \text{Cauchy}(x_0, \gamma)$
  return x0 + gamma * tan(pi() * (x - 0.5));
}

real half_cauchy_prior(real x, real x0, real gamma) {
  // if $x \sim \mathcal{U}(0, 1)$ then $y \sim \text{Cauchy}_{>x_0}(x_0, \gamma)$
  return cauchy_prior(flat_prior(x, 0.5, 1.), x0, gamma);
}